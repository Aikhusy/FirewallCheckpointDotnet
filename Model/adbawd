using System;
using System.Threading;
using System.Threading.Tasks;
using Telegram.Bot;
using Telegram.Bot.Exceptions;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using System.Collections.Generic;
using System.Text;

namespace Firewall
{
    public class Notif : INotif
    {
        private ITelegramBotClient botClient;

        public Notif()
        {
            // Initialize the bot client
            botClient = new TelegramBotClient("API_TOKEN_HERE");
        }

        // Method that initializes and runs the bot
        public async Task RunBot(StringBuilder messages)
        {
            var me = await botClient.GetMeAsync();
            Console.WriteLine($"Hello! Bot {me.Username} is ready.");

            // Start receiving updates
            var cts = new CancellationTokenSource();
            botClient.StartReceiving(
                HandleUpdateAsync,
                HandleErrorAsync,
                cancellationToken: cts.Token
            );

            Console.WriteLine("Press any key to exit");

            long chatId = -1002394470457;

            await botClient.SendTextMessageAsync(
                chatId: chatId,
                text: messages.ToString(),
                cancellationToken: cts.Token
            );

            Console.ReadKey();

            // Stop receiving updates
            cts.Cancel();
        }

        // Handle incoming updates
        public async Task HandleUpdateAsync(ITelegramBotClient botClient, Update update, CancellationToken cancellationToken)
        {
            if (update.Type != UpdateType.Message)
                return;

            var message = update.Message;
            if (message?.Text != null)
            {
                Console.WriteLine($"Received a message from {message.Chat.Username}: {message.Text}");

                await botClient.SendTextMessageAsync(
                    chatId: message.Chat.Id,
                    text: $"You said: {message.Text}",
                    cancellationToken: cancellationToken
                );
            }
        }

        public StringBuilder CheckDataStatus(Dictionary<string, object> data, string fwName)
        {
            StringBuilder tasks = new StringBuilder();

            if (Convert.ToInt32(data["cpu"]) >= 80)
            {
                string message = $"ðŸš¨ Alert: Firewall {fwName} usage is high! Current CPU: {data["cpu"]}% ðŸš¨\n\n";
                tasks.Append(message);
            }

            if (Convert.ToInt32(data["rx_error_total"]) >= 1)
            {
                string message = $"ðŸš¨ Alert: Firewall {fwName} has Received Package Error! Total Errors: {data["rx_error_total"]} ðŸš¨\n\n";
                tasks.Append(message);
            }

            if (Convert.ToInt32(data["tx_error_total"]) >= 1)
            {
                string message = $"ðŸš¨ Alert: Firewall {fwName} has Transmit Package Error! Total Errors: {data["tx_error_total"]} ðŸš¨\n\n";
                tasks.Append(message);
            }

            if (data["raid_state"].ToString() == "FAILED")
            {
                string message = $"ðŸš¨ Alert: Firewall {fwName} RAID state is FAILED! ðŸš¨\n\n";
                tasks.Append(message);
            }

            if (data["licence_status"].ToString() == "none")
            {
                string message = $"ðŸš¨ Alert: Firewall {fwName} Have no licenses! ðŸš¨\n\n";
                tasks.Append(message);
            }

            if (data["hotfix"].ToString() == "No Hotfix Found")
            {
                string message = $"ðŸš¨ Alert: Firewall {fwName} Have no Hotfixes! ðŸš¨\n\n";
                tasks.Append(message);
            }

            if (Convert.ToInt32(data["fwtmp"]) >= 80)
            {
                string message = $"ðŸš¨ Alert: Firewall {fwName} disk Space / or /fwtmp Almost Full at {data["fwtmp"]}% ðŸš¨\n\n";
                tasks.Append(message);
            }

            if (Convert.ToInt32(data["varloglog"]) >= 80)
            {
                string message = $"ðŸš¨ Alert: Firewall {fwName} disk Space /var/log or /log Almost Full at {data["varloglog"]}% ðŸš¨\n\n";
                tasks.Append(message);
            }

            return tasks;
        }

        // Handle errors
        public Task HandleErrorAsync(ITelegramBotClient botClient, Exception exception, CancellationToken cancellationToken)
        {
            var errorMessage = exception switch
            {
                ApiRequestException apiRequestException => $"Telegram API Error:\n[{apiRequestException.ErrorCode}]\n{apiRequestException.Message}",
                _ => exception.ToString()
            };

            Console.WriteLine(errorMessage);
            return Task.CompletedTask;
        }
    }
}
